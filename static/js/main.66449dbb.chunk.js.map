{"version":3,"sources":["modules/app/action.ts","modules/skilltree/action.ts","dependencies.ts","modules/app/reducer.ts","modules/app/epic.ts","modules/skilltree/epic.ts","modules/skilltree/reducer.ts","store.ts","index.tsx"],"names":["APP_ACTION_TYPES","initApp","type","INIT","actionSuccess","ACTION_SUCCESS","SKILL_TREE_ACTION_TYPES","setSkillTreeData","data","SET_SKILL_TREE_DATA","payload","setSkillState","skill","SET_SKILL_STATE","selectSkill","SELECT_SKILL","initialState","initialized","appReducer","state","action","combineEpics","action$","state$","stateServices","pipe","ofType","map","x","SkillList","originality","warm","solidness","power","points","totalPoints","skillState","selectedSkill","skillTreeReducer","name","rootReducer","combineReducers","app","skillTree","rootEpic","appEpic","skillTreeInitEpic","App","React","lazy","then","module","default","APP_ROOT","document","getElementById","ReactDOM","render","Suspense","fallback","path","component","props","store","dependencies","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","middlewares","createStore","applyMiddleware","run","configureStore"],"mappings":"iIAGO,IAAKA,EAAZ,sG,SAAYA,K,YAAAA,E,cAAAA,E,iCAAAA,M,KAYL,IAAMC,EAAU,iBAAmB,CACxCC,KAAMF,EAAiBG,OAQZC,EAAgB,iBAA4B,CACvDF,KAAMF,EAAiBK,kB,gCCrBlB,IAAKC,EAAZ,wI,SAAYA,K,YAAAA,E,0CAAAA,E,kCAAAA,E,6BAAAA,M,KAcL,IAIMC,EAAmB,SAACC,GAAD,MAAkD,CAChFN,KAAMI,EAAwBG,oBAC9BC,QAASF,IAGEG,EAAgB,SAACC,GAAD,MAA6C,CACxEV,KAAMI,EAAwBO,gBAC9BH,QAASE,IAGEE,EAAc,SAACF,GAAD,MAAuC,CAChEV,KAAMI,EAAwBS,aAC9BL,QAASE,K,wvdClCJ,I,wCCQMI,EAAe,CAC1BC,aAAa,GAkBAC,EAfmC,WAG5C,IAFJC,EAEG,uDAFKH,EACRI,EACG,uCACH,OAAQA,EAAOlB,MACb,KAAKF,IAAiBG,KACpB,OAAO,2BACFgB,GADL,IAEEF,aAAa,IAEjB,QACE,OAAOE,I,gBCREE,eARkB,SAACC,EAASC,EAAV,KAAiDC,cAAjD,OAC/BF,EAAQG,KACNC,YAA2B1B,IAAiBG,MAC5CwB,aAAI,SAAAC,GACF,OAAOxB,qB,gBCUEiB,eAZwB,SACrCC,EACAC,EAFqC,KAGnCC,cAHmC,OAKrCF,EAAQG,KACNC,YAA2B1B,IAAiBG,MAC5CwB,aAAI,SAAAC,GACF,OAAOrB,YAAiBsB,UCJjBb,EAA+B,CAC1CR,KAAM,CACJsB,YAAa,GACbC,KAAM,GACNC,UAAW,GACXC,MAAO,IAETC,OAAQ,EACRC,YAAa,EACbC,WAAY,GACZC,cAAe,IA6BFC,EA1B+C,WAAmC,IAAlCnB,EAAiC,uDAAzBH,EAAcI,EAAW,uCAC9F,OAAQA,EAAOlB,MACb,KAAKI,IAAwBG,oBAC3B,OAAO,2BACFU,GADL,IAEEX,KAAMY,EAAOV,UAEjB,KAAKJ,IAAwBS,aAC3B,OAAO,2BACFI,GADL,IAEEkB,cAAejB,EAAOV,UAE1B,KAAKJ,IAAwBO,gBAC3B,IAAMuB,EAAU,eACXjB,EAAMiB,YAGX,OADAA,EAAWhB,EAAOV,QAAQ6B,MAAQnB,EAAOV,QAClC,2BACFS,GADL,IAEEiB,eAEJ,QACE,OAAOjB,IC5BAqB,EAAcC,YAAgB,CAAEC,IAAKxB,EAAYyB,UAAWL,IAE5DM,EAAWvB,YAAawB,EAASC,G,4DCXxCC,G,wBAAMC,IAAMC,MAAK,kBAAM,mDAAyBC,MAAK,SAAAC,GAAM,MAAK,CAACC,QAASD,EAAOJ,YAEjFM,EAAWC,SAASC,eAAe,QAEzCC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,4CACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAK,IACLC,UAAW,SAACC,GACV,IACMC,EDKX,SAAwBC,GAC7B,IAAMC,EAAmBC,OAAOC,sCAAwCC,IAElEC,EAAiBC,YAAqB,CAAEN,iBAExCO,EAA4B,CAACF,GAE7BN,EAAQS,YAAYhC,EAAayB,EAAiBQ,IAAe,WAAf,EAAmBF,KAI3E,OAFAF,EAAeK,IAAI9B,GAEZmB,EChBiBY,CNpBjB,CACLnD,cAHoB,KMuBZ,OACE,kBAAC,IAAD,CAAUuC,MAAOA,GACf,kBAAChB,EAAD,aASdM,K","file":"static/js/main.66449dbb.chunk.js","sourcesContent":["import { Action } from \"redux\";\r\nimport { ActionWithPayload } from \"../../utils/action\";\r\n\r\nexport enum APP_ACTION_TYPES {\r\n  INIT = \"INIT\",\r\n  ERROR = \"ERROR\",\r\n  ACTION_SUCCESS = \"ACTION_SUCCESS\"\r\n}\r\n\r\nexport type InitAction = Action<APP_ACTION_TYPES.INIT>;\r\nexport type ErrorAction = ActionWithPayload<APP_ACTION_TYPES.ERROR, string>;\r\nexport type ActionSuccessAction = Action<APP_ACTION_TYPES.ACTION_SUCCESS>;\r\n\r\nexport type AppActions = InitAction | ErrorAction | ActionSuccessAction;\r\n\r\nexport const initApp = (): InitAction => ({\r\n  type: APP_ACTION_TYPES.INIT\r\n});\r\n\r\nexport const errorApp = (msg: string): ErrorAction => ({\r\n  type: APP_ACTION_TYPES.ERROR,\r\n  payload: msg\r\n});\r\n\r\nexport const actionSuccess = (): ActionSuccessAction => ({\r\n  type: APP_ACTION_TYPES.ACTION_SUCCESS\r\n});\r\n","import { Action } from \"redux\";\r\nimport { ActionWithPayload } from \"../../utils/action\";\r\nimport { SkillTreeData, SkillState } from \"./type\";\r\n\r\nexport enum SKILL_TREE_ACTION_TYPES {\r\n  INIT = \"INIT\",\r\n  SET_SKILL_TREE_DATA = \"SET_SKILL_TREE_DATA\",\r\n  SET_SKILL_STATE = \"SET_SKILL_STATE\",\r\n  SELECT_SKILL = \"SELECT_SKILL\"\r\n}\r\n\r\nexport type InitAction = Action<SKILL_TREE_ACTION_TYPES.INIT>;\r\nexport type SetSkillTreeDataAction = ActionWithPayload<SKILL_TREE_ACTION_TYPES.SET_SKILL_TREE_DATA, SkillTreeData>;\r\nexport type SetSkillStateAction = ActionWithPayload<SKILL_TREE_ACTION_TYPES.SET_SKILL_STATE, SkillState>;\r\nexport type SelectSkillAction = ActionWithPayload<SKILL_TREE_ACTION_TYPES.SELECT_SKILL, string>;\r\n\r\nexport type SkillTreeActions = InitAction | SetSkillTreeDataAction | SetSkillStateAction | SelectSkillAction;\r\n\r\nexport const initSkillTree = (): InitAction => ({\r\n  type: SKILL_TREE_ACTION_TYPES.INIT\r\n});\r\n\r\nexport const setSkillTreeData = (data: SkillTreeData): SetSkillTreeDataAction => ({\r\n  type: SKILL_TREE_ACTION_TYPES.SET_SKILL_TREE_DATA,\r\n  payload: data\r\n});\r\n\r\nexport const setSkillState = (skill: SkillState): SetSkillStateAction => ({\r\n  type: SKILL_TREE_ACTION_TYPES.SET_SKILL_STATE,\r\n  payload: skill\r\n});\r\n\r\nexport const selectSkill = (skill: string): SelectSkillAction => ({\r\n  type: SKILL_TREE_ACTION_TYPES.SELECT_SKILL,\r\n  payload: skill\r\n});\r\n","export const createDependencies = () => {\r\n  const stateServices = {};\r\n\r\n  return {\r\n    stateServices,\r\n  };\r\n};\r\n\r\nexport type Dependencies = ReturnType<typeof createDependencies>;\r\n","import { Reducer } from \"redux\";\r\nimport { AllActions } from \"../../store\";\r\nimport { APP_ACTION_TYPES } from \"./action\";\r\n\r\nexport interface AppState {\r\n  initialized: boolean;\r\n}\r\n\r\nexport const initialState = {\r\n  initialized: false,\r\n};\r\n\r\nconst appReducer: Reducer<AppState, AllActions> = (\r\n  state = initialState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case APP_ACTION_TYPES.INIT:\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default appReducer;\r\n","import { Epic, StateObservable, ofType, combineEpics } from \"redux-observable\";\r\nimport { InitAction, APP_ACTION_TYPES, actionSuccess } from \"./action\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Action } from \"redux\";\r\nimport { StoreState } from \"../../store\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nexport const appInitEpic: Epic = (action$, state$: StateObservable<StoreState>, { stateServices }): Observable<Action<any>> =>\r\n  action$.pipe(\r\n    ofType<Action, InitAction>(APP_ACTION_TYPES.INIT),\r\n    map(x => {\r\n      return actionSuccess();\r\n    })\r\n  );\r\n\r\nexport default combineEpics(appInitEpic);\r\n","import { Epic, StateObservable, ofType, combineEpics } from \"redux-observable\";\r\nimport { SKILL_TREE_ACTION_TYPES, setSkillTreeData } from \"./action\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Action } from \"redux\";\r\nimport { StoreState } from \"../../store\";\r\nimport { Observable } from \"rxjs\";\r\nimport { InitAction, APP_ACTION_TYPES } from \"../app/action\";\r\nimport SkillList from \"./skill-list.json\"\r\n\r\nexport const skillTreeInitEpic: Epic = (\r\n  action$,\r\n  state$: StateObservable<StoreState>,\r\n  { stateServices }\r\n): Observable<Action<any>> =>\r\n  action$.pipe(\r\n    ofType<Action, InitAction>(APP_ACTION_TYPES.INIT),\r\n    map(x => {\r\n      return setSkillTreeData(SkillList);\r\n    })\r\n  );\r\n\r\nexport default combineEpics(skillTreeInitEpic);\r\n","import { Reducer } from \"redux\";\r\nimport { AllActions } from \"../../store\";\r\nimport { SKILL_TREE_ACTION_TYPES } from \"./action\";\r\nimport { SkillTreeData, SkillState } from \"./type\";\r\n\r\nexport interface SkillTreeState {\r\n  data: SkillTreeData;\r\n  points: number;\r\n  totalPoints: number;\r\n  skillState: { [id: string]: SkillState };\r\n  selectedSkill: string;\r\n}\r\n\r\nexport const initialState: SkillTreeState = {\r\n  data: {\r\n    originality: [],\r\n    warm: [],\r\n    solidness: [],\r\n    power: []\r\n  },\r\n  points: 0,\r\n  totalPoints: 0,\r\n  skillState: {},\r\n  selectedSkill: \"\"\r\n};\r\n\r\nconst skillTreeReducer: Reducer<SkillTreeState, AllActions> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SKILL_TREE_ACTION_TYPES.SET_SKILL_TREE_DATA:\r\n      return {\r\n        ...state,\r\n        data: action.payload\r\n      };\r\n    case SKILL_TREE_ACTION_TYPES.SELECT_SKILL:\r\n      return {\r\n        ...state,\r\n        selectedSkill: action.payload\r\n      };\r\n    case SKILL_TREE_ACTION_TYPES.SET_SKILL_STATE:\r\n      const skillState = {\r\n        ...state.skillState\r\n      };\r\n      skillState[action.payload.name] = action.payload;\r\n      return {\r\n        ...state,\r\n        skillState\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default skillTreeReducer;\r\n","import { combineReducers, compose, Middleware, createStore, applyMiddleware } from \"redux\";\r\nimport { combineEpics, createEpicMiddleware } from \"redux-observable\";\r\nimport { AppActions } from \"./modules/app/action\";\r\nimport appReducer, { AppState } from \"./modules/app/reducer\";\r\nimport appEpic from \"./modules/app/epic\";\r\nimport skillTreeInitEpic from \"./modules/skilltree/epic\";\r\nimport skillTreeReducer, { SkillTreeState } from \"./modules/skilltree/reducer\";\r\nimport { SkillTreeActions } from \"./modules/skilltree/action\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\r\n  }\r\n}\r\n\r\nexport interface StoreState {\r\n  app: AppState;\r\n  skillTree: SkillTreeState\r\n}\r\n\r\nexport const rootReducer = combineReducers({ app: appReducer, skillTree: skillTreeReducer });\r\n\r\nexport const rootEpic = combineEpics(appEpic, skillTreeInitEpic);\r\n\r\nexport type AllActions = AppActions | SkillTreeActions;\r\n\r\nexport type GlobalState = ReturnType<typeof rootReducer>;\r\n\r\nexport function configureStore(dependencies: any) {\r\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n  const epicMiddleware = createEpicMiddleware({ dependencies });\r\n\r\n  const middlewares: Middleware[] = [epicMiddleware];\r\n\r\n  const store = createStore(rootReducer, composeEnhancers(applyMiddleware(...middlewares)));\r\n\r\n  epicMiddleware.run(rootEpic);\r\n\r\n  return store;\r\n}\r\n","import { createDependencies } from \"./dependencies\";\r\nimport { configureStore } from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport \"./styles/global.scss\";\r\nimport 'primereact/resources/themes/md-light-indigo/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\n\r\nconst App = React.lazy(() => import(\"./modules/app/\").then(module => ({default: module.App})))\r\n\r\nconst APP_ROOT = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <BrowserRouter /*basename=\"/axy\"*/>\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Switch>\r\n        <Route\r\n          path=\"/\"\r\n          component={(props: any) => {\r\n            const dependencies = createDependencies();\r\n            const store = configureStore(dependencies);\r\n            return (\r\n              <Provider store={store}>\r\n                <App />\r\n              </Provider>\r\n            );\r\n          }}\r\n        />\r\n      </Switch>\r\n    </React.Suspense>\r\n  </BrowserRouter>,\r\n\r\n  APP_ROOT\r\n);\r\n"],"sourceRoot":""}