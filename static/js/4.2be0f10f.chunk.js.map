{"version":3,"sources":["modules/app/App.styled.ts","modules/skilltree/SkillTree.styled.ts","modules/skilltree/skillbranch/SkillBranch.styled.ts","modules/skilltree/skill/Skill.styled.ts","modules/skilltree/skill/Skill.tsx","modules/skilltree/lines/Line.styled.ts","modules/skilltree/lines/Line.tsx","modules/skilltree/skillbranch/SkillBranch.container.ts","modules/skilltree/skillbranch/SkillBranch.tsx","modules/skilltree/SkillTree.container.ts","modules/skilltree/SkillTree.tsx","modules/app/selector.ts","modules/app/App.container.ts","modules/app/App.tsx"],"names":["Container","styled","div","Skill","data","skill","onClick","name","Line","type","lines","className","connect","state","points","skillTree","totalPoints","skillsState","skillState","dispatch","onSelectSkill","selectSkill","skills","length","id","skillData","selectedSkill","onSkillUpdate","setSkillState","useState","activeIndex","setActiveIndex","originality","power","solidness","warm","find","x","level","onTabChange","e","index","header","dismissableMask","closeOnEscape","visible","style","width","maxWidth","footer","icon","max","onHide","effects","map","key","info","effect","filter","description","selectInitialized","createSelector","app","initialized","onInit","initApp","useEffect"],"mappings":"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","file":"static/js/4.2be0f10f.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div``;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\n  .p-tabview-nav-link {\r\n    padding: 1rem !important;\r\n  }\r\n\r\n  .p-dialog {\r\n    .p-dialog-content {\r\n      .header {\r\n        margin-bottom: 10px;\r\n      }\r\n      .info {\r\n        margin-bottom: 10px;\r\n      }\r\n      .desc {\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\n  /* position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%); */\r\n\r\n  .header {\r\n    display: flex;\r\n\r\n    .name {\r\n      font-weight: bolder;\r\n      margin-right: 10px;\r\n    }\r\n\r\n    *:last-child {\r\n      margin-left: auto;\r\n    }\r\n\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .tree {\r\n    position: relative;\r\n    .branches {\r\n      position: absolute;\r\n      left: 50%;\r\n      transform: translate(-50%, 0);\r\n\r\n\r\n      .row {\r\n        display: flex;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\n  border: 1px solid black;\r\n  height: 75px;\r\n  width: 75px;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { Container } from \"./Skill.styled\";\r\nimport { SkillData, SkillState } from \"../type\";\r\n\r\nexport interface StateProps {\r\n  data: SkillData;\r\n  skill: SkillState;\r\n}\r\n\r\nexport interface DispatchProps {\r\n  onClick: (skill: string) => void;\r\n}\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nexport const Skill: React.FC<Props> = ({ data, skill, onClick }) => {\r\n  return (\r\n    <Container\r\n      onClick={() => {\r\n        if (!skill) onClick(data.name);\r\n        else onClick(skill.name);\r\n      }}>\r\n      <div>{data.name}</div>\r\n    </Container>\r\n  );\r\n};\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Container = styled.div`\r\n  height: 75px;\r\n  width: 76px;\r\n  position: relative;\r\n  display: flex;\r\n\r\n  .horizontal {\r\n    margin-top: 50%;\r\n    height: 50%;\r\n    width: 100%;\r\n    border-top: 1px solid black;\r\n  }\r\n  .vertical {\r\n    height: 100%;\r\n    width: 50%;\r\n    border-right: 1px solid black;\r\n  }\r\n  .h {\r\n    margin-top: 50%;\r\n    height: 50%;\r\n    width: 100%;\r\n    border-top: 1px solid black;\r\n    position: absolute;\r\n  }\r\n  .v {\r\n    height: 100%;\r\n    width: 50%;\r\n    border-right: 1px solid black;\r\n    position: absolute;\r\n  }\r\n  .left {\r\n    margin-top: 50%;\r\n    height: 50%;\r\n    width: 50%;\r\n    border-right: 1px solid black;\r\n    border-top: 1px solid black;\r\n  }\r\n\r\n  .right {\r\n    margin-top: 50%;\r\n    margin-left: 50%;\r\n    height: 50%;\r\n    width: 50%;\r\n    border-left: 1px solid black;\r\n    border-top: 1px solid black;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Container } from \"./Line.styled\";\r\n\r\nexport interface StateProps {\r\n  type: number;\r\n}\r\n\r\nexport interface DispatchProps {}\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nexport const Line: React.FC<Props> = ({ type }) => {\r\n  return <Container>{lines(type)}</Container>;\r\n};\r\n\r\nconst lines = (type: number) => {\r\n  switch (type) {\r\n    case 0:\r\n      return <div className=\"\"></div>;\r\n    case 1:\r\n      return (\r\n        <>\r\n          <div className=\"horizontal\" />\r\n        </>\r\n      );\r\n    case 2:\r\n      return (\r\n        <>\r\n          <div className=\"vertical\" />\r\n        </>\r\n      );\r\n    case 3:\r\n      return (\r\n        <>\r\n          <div className=\"h\" />\r\n          <div className=\"v\" />\r\n        </>\r\n      );\r\n    case 4:\r\n      return (\r\n        <>\r\n          <div className=\"left\" />\r\n        </>\r\n      );\r\n    case 5:\r\n      return (\r\n        <>\r\n          <div className=\"right\" />\r\n        </>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n","import { StateProps, DispatchProps, SkillBranch } from \"./SkillBranch\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { GlobalState } from \"../../../store\";\r\nimport { SkillState } from \"../type\";\r\nimport { setSkillState, selectSkill } from \"../action\";\r\n\r\nconst mapStateToProps = (state: GlobalState): StateProps => ({\r\n  points: state.skillTree.points,\r\n  totalPoints: state.skillTree.totalPoints,\r\n  skillsState: state.skillTree.skillState\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\r\n  onSelectSkill: skill => dispatch(selectSkill(skill))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SkillBranch);\r\n","import React, { useState } from \"react\";\r\nimport { Container } from \"./SkillBranch.styled\";\r\nimport { SkillData, SkillState } from \"../type\";\r\nimport { Skill } from \"../skill/Skill\";\r\nimport { Line } from \"../lines/Line\";\r\n\r\nexport interface LocalProps {\r\n  name: string;\r\n  skills: SkillData[];\r\n}\r\n\r\nexport interface StateProps {\r\n  points: number;\r\n  totalPoints: number;\r\n  skillsState: { [id: string]: SkillState };\r\n}\r\n\r\nexport interface DispatchProps {\r\n  onSelectSkill: (skill: string) => void;\r\n}\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nexport const SkillBranch: React.FC<Props & LocalProps> = ({\r\n  name,\r\n  skills,\r\n  points,\r\n  skillsState,\r\n  totalPoints,\r\n  onSelectSkill\r\n}) => {\r\n  if (skills.length < 1) return <div>Empty!</div>;\r\n  return (\r\n    <Container>\r\n      <div id=\"header\" className=\"header\">\r\n        <div className=\"name\">{name}</div>\r\n        <div className=\"level\">Lv.0</div>\r\n        <div>{`${points}/${totalPoints}`}</div>\r\n      </div>\r\n      <div className=\"tree\">\r\n        <div id=\"body\" className=\"branches\">\r\n          <div className=\"row\">\r\n            <Line type={0} />\r\n            <Line type={0} />\r\n            <Skill data={skills[0]} skill={skillsState[skills[0].name]} onClick={onSelectSkill} />\r\n            <Line type={0} />\r\n            <Line type={0} />\r\n          </div>\r\n          <div className=\"row\">\r\n            <Line type={5} />\r\n            <Line type={1} />\r\n            <Line type={3} />\r\n            <Line type={1} />\r\n            <Line type={4} />\r\n          </div>\r\n          <div className=\"row\">\r\n            <Skill data={skills[1]} skill={skillsState[skills[1].name]} onClick={onSelectSkill} />\r\n            <Line type={0} />\r\n            <Skill data={skills[4]} skill={skillsState[skills[4].name]} onClick={onSelectSkill} />\r\n            <Line type={0} />\r\n            <Skill data={skills[7]} skill={skillsState[skills[7].name]} onClick={onSelectSkill} />\r\n          </div>\r\n          <div className=\"row\">\r\n            <Line type={2} />\r\n            <Line type={0} />\r\n            <Line type={2} />\r\n            <Line type={0} />\r\n            <Line type={2} />\r\n          </div>\r\n          <div className=\"row\">\r\n            <Skill data={skills[2]} skill={skillsState[skills[2].name]} onClick={onSelectSkill} />\r\n            <Line type={0} />\r\n            <Skill data={skills[5]} skill={skillsState[skills[5].name]} onClick={onSelectSkill} />\r\n            <Line type={0} />\r\n            <Skill data={skills[8]} skill={skillsState[skills[8].name]} onClick={onSelectSkill} />\r\n          </div>\r\n          <div className=\"row\">\r\n            <Line type={2} />\r\n            <Line type={0} />\r\n            <Line type={2} />\r\n            <Line type={0} />\r\n            <Line type={2} />\r\n          </div>\r\n          <div className=\"row\">\r\n            <Skill data={skills[3]} skill={skillsState[skills[3].name]} onClick={onSelectSkill} />\r\n            <Line type={0} />\r\n            <Skill data={skills[6]} skill={skillsState[skills[6].name]} onClick={onSelectSkill} />\r\n            <Line type={0} />\r\n            <Skill data={skills[9]} skill={skillsState[skills[9].name]} onClick={onSelectSkill} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n","import { StateProps, DispatchProps, SkillTree } from \"./SkillTree\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { GlobalState } from \"../../store\";\r\nimport { selectData } from \"./selector\";\r\nimport { selectSkill, setSkillState } from \"./action\";\r\n\r\nconst mapStateToProps = (state: GlobalState): StateProps => ({\r\n  skillData: state.skillTree.data,\r\n  points: state.skillTree.points,\r\n  totalPoints: state.skillTree.totalPoints,\r\n  selectedSkill: state.skillTree.selectedSkill,\r\n  skillState: state.skillTree.skillState\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\r\n  onSelectSkill: () => dispatch(selectSkill(\"\")),\r\n  onSkillUpdate: skill => dispatch(setSkillState(skill))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SkillTree);\r\n","import React, { useState } from \"react\";\r\nimport { Container } from \"./SkillTree.styled\";\r\nimport { TabView, TabPanel } from \"primereact/tabview\";\r\nimport { SkillTreeData, SkillState } from \"./type\";\r\nimport { SkillBranch } from \"./skillbranch\";\r\nimport { Dialog } from \"primereact/dialog\";\r\nimport { Button } from \"primereact/button\";\r\n\r\nexport interface StateProps {\r\n  skillData: SkillTreeData;\r\n  points: number;\r\n  totalPoints: number;\r\n  skillState: { [id: string]: SkillState };\r\n  selectedSkill: string;\r\n}\r\n\r\nexport interface DispatchProps {\r\n  onSelectSkill: () => void;\r\n  onSkillUpdate: (skill: SkillState) => void;\r\n}\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nexport const SkillTree: React.FC<Props> = ({\r\n  skillData,\r\n  selectedSkill,\r\n  points,\r\n  totalPoints,\r\n  skillState,\r\n  onSelectSkill,\r\n  onSkillUpdate\r\n}) => {\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n\r\n  const data = [...skillData.originality, ...skillData.power, ...skillData.solidness, ...skillData.warm].find(\r\n    x => x.name == selectedSkill\r\n  );\r\n\r\n  const skill = skillState[selectedSkill] ? skillState[selectedSkill] : ({ name: data?.name, level: 0 } as SkillState);\r\n\r\n  function header() {\r\n    return `${selectedSkill} ${points}/${totalPoints}`;\r\n  }\r\n\r\n  function body() {\r\n    if (!data || selectedSkill == \"\") return null;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"header\">\r\n          <label>Lv.{skill.level}</label>\r\n        </div>\r\n        <div className=\"info\">\r\n          {data.effects.map(x => (\r\n            <div key={x.info}>{`${x.info}${x.effect[skill.level]}${x.type}`}</div>\r\n          ))}\r\n        </div>\r\n        <div className=\"desc\">\r\n          {data.effects\r\n            .filter(x => x.description != \"\")\r\n            .map(x => (\r\n              <div key={x.description}>&#9654;{`${x.description}`}</div>\r\n            ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function footer() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          icon=\"pi pi-minus\"\r\n          onClick={() => {\r\n            if (skill.level < 1) return;\r\n\r\n            onSkillUpdate({ ...skill, level: skill.level - 1 });\r\n          }}\r\n        />\r\n        <Button\r\n          icon=\"pi pi-plus\"\r\n          onClick={() => {\r\n            if (!data || skill.level == data.max) return;\r\n            onSkillUpdate({ ...skill, level: skill.level + 1 });\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function dialog() {\r\n    return (\r\n      <Dialog\r\n        className=\"dialog\"\r\n        header={header()}\r\n        dismissableMask={true}\r\n        closeOnEscape={true}\r\n        visible={selectedSkill != \"\"}\r\n        style={{ width: \"100%\", maxWidth: \"500px\" }}\r\n        footer={footer()}\r\n        onHide={() => onSelectSkill()}>\r\n        {body()}\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TabView activeIndex={activeIndex} onTabChange={e => setActiveIndex(e.index)}>\r\n        <TabPanel header=\"Originality\">\r\n          <SkillBranch name={\"Originality\"} skills={skillData.originality} />\r\n        </TabPanel>\r\n        <TabPanel header=\"Warmth\">\r\n          <SkillBranch name={\"Warmth\"} skills={skillData.warm} />\r\n        </TabPanel>\r\n        <TabPanel header=\"Solidness\">\r\n          <SkillBranch name={\"Solidness\"} skills={skillData.solidness} />\r\n        </TabPanel>\r\n        <TabPanel header=\"Power\">\r\n          <SkillBranch name={\"Power\"} skills={skillData.power} />\r\n        </TabPanel>\r\n      </TabView>\r\n      {dialog()}\r\n    </Container>\r\n  );\r\n};\r\n","import { GlobalState } from \"../../store\";\r\nimport { createSelector } from \"reselect\";\r\n\r\nexport const selectApp = (state: GlobalState) => state.app;\r\n\r\nexport const selectInitialized = createSelector(\r\n  selectApp,\r\n  ({ initialized }) => !!initialized\r\n);\r\n","import { StateProps, DispatchProps, App } from \"./App\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { GlobalState } from \"../../store\";\r\nimport { selectInitialized } from \"./selector\";\r\nimport { initApp } from \"./action\";\r\n\r\nconst mapStateToProps = (state: GlobalState): StateProps => ({\r\n  initialized: selectInitialized(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\r\n  onInit: () => dispatch(initApp()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React, { useEffect } from \"react\";\r\nimport { Container } from \"./App.styled\";\r\nimport { SkillTree } from \"../skilltree\";\r\nexport interface StateProps {\r\n  initialized: boolean;\r\n}\r\n\r\nexport interface DispatchProps {\r\n  onInit: () => void;\r\n}\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nexport const App: React.FC<Props> = ({ initialized, onInit }) => {\r\n  useEffect(() => {\r\n    onInit();\r\n  }, []);\r\n\r\n  if (!initialized) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <SkillTree />\r\n    </Container>\r\n  );\r\n};\r\n"],"sourceRoot":""}